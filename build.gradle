plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
//    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

//noinspection GroovyUnusedAssignment

version = mod_version
group = maven_group
base {
    archivesName = mod_id
}

//if (project.flavor == 'dev') {
//    flavor = 'dev'
//} else {
//    flavor = minecraft_version
//}


//loom {
//    splitEnvironmentSourceSets()
//
//    mods {
//        imblocker {
//            sourceSet sourceSets.main
//            sourceSet sourceSets.client
//        }
//    }
//
//}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: 'yarn', version: '1'
    mappings channel: 'snapshot', version: '20210309-1.16.5'

    // When true, this property will have all Eclipse run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true

    // When true, this property will have all IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {

    // forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // fabric
    // minecraft "com.mojang:minecraft:${minecraft_version}"
    // mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    // modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${fabric_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // compile against the JEI API but do not include it at runtime
    // compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75:api")
    // at runtime, use the full JEI jar
    // runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.6.1.75")
    // runtimeOnly fg.deobf('curse.maven:configured-457570:3546348')

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

//channelProviders.addProvider(new ChannelProvider() {
//    Set<String> getChannels() {
//        println "channels"
//        return ImmutableSet.of('yarn')
//    }
//
//    File getMappingsFile(MCPRepo mcpRepo, Project project, String channel, String version) {
//        String desc = "net.fabricmc:yarn:" + version + ":v2@zip";
//        println 'get' + desc
//        return MavenArtifactDownloader.manual(project, desc, false);
//    }
//})

// Process resources on build
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json']
// gradle.properties
def replaceProperties = [
        minecraft_version: minecraft_version,
        mod_id: mod_id,
        mod_name: mod_name,
        mod_version: mod_version,
        mod_logo: mod_logo,
        mod_url: mod_url,
        issues_url: issues_url,
        maven_group: maven_group,
        license: license,
        credits: credits,
        author: author,
        email: email,
        description: mod_description,
        fabric_version: fabric_version,
        yarn_mappings: yarn_mappings,
        loader_version: loader_version,
        forge_version: forge_version,
        loader_version_range: loader_version_range,
        mapping_channel: mapping_channel,
        mapping_version: mapping_version

]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": author,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" : author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    exclude 'io/github/reserveword/imblocker/asmdummy'
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}